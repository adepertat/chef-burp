#
# Cookbook Name:: burp
# Recipe:: client
#
# Copyright (c) 2015 The Authors, All Rights Reserved.
include_recipe 'burp::install'

# BURP SERVER
# ===========
# Look for burp servers
server_query = "role:#{node[:burp][:role][:server]}"
burp_server = ''

if node.run_list.roles.include?(node[:burp][:role][:server])
	burp_server << node[:fqdn]
else
	results = search(:node, "#{server_query} AND chef_environment:#{node.chef_environment}")
	burp_server = results.map { |n| n[:fqdn] }.first
end

node.set[:burp][:server][:name] = "#{burp_server}"

# CONFIGURATION
# =============
template "#{node[:burp][:client][:config_dir]}/burp.conf" do
	source 'burp.conf.erb'
	owner node[:burp][:client][:config][:user]
	group node[:burp][:client][:config][:group]
	mode '0600'
	variables({
		:settings => node[:burp][:client][:config],
		:config_dir => node[:burp][:client][:config_dir],
	})
end
#cookbook_file "#{node[:burp][:client][:config_dir]}/burp.conf" do
#	source 'burp.conf'
#	owner 'root'
#	group 'root'
#	mode '0600'
#end

file "#{node[:burp][:client][:config_dir]}/burp.conf.local" do
	content "cname = #{node[:fqdn]}\nserver = #{burp_server}\n"
	owner node[:burp][:client][:config][:user]
	group node[:burp][:client][:config][:group]
	mode '0600'
end

# PASSWORD
# --------
# The password is generated by the recipe or can be specified in the
# [:burp][:client][:password] attribute of the node. It will be used by the
# server recipe.
if ! ::File.exists?("#{node[:burp][:client][:config_dir]}/burp.conf.password")

	# Generate password or get it from the node attributes
	require 'securerandom'
	password = node[:burp][:client].fetch(:password, SecureRandom.base64(34))

	# Write it in the client configuration
	file "#{node[:burp][:client][:config_dir]}/burp.conf.password" do
		content "password = #{password}\n"
		owner node[:burp][:client][:config][:user]
		group node[:burp][:client][:config][:group]
		mode '0600'
	end

	# Set it as an attribute for further retrieval
	node.set[:burp][:client][:password] = password
end

# CRON
# ====
# The burp client does not provide a way to launch itself by default, so we're
# setting up a cron job to do it.
if node[:burp][:client][:run_with_cron]
	cron "burp-client" do
		user node[:burp][:client][:config][:user]
		command "#{node[:burp][:client][:binary]} -a b"
		time node[:burp][:client][:time]
		mailto node[:burp][:client][:mailto]
	end
else
	cron "burp-client" do
		action :delete
	end
end
